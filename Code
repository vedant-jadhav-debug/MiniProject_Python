import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import requests
import webbrowser
import geocoder
import pyttsx3
import threading

# Open Charge Map API Key
API_KEY = "8056f12a-73d6-4463-afbb-2313639803da"

# Initialize speech engine
engine = pyttsx3.init()

# Function to speak with female voice and slow speed
def speak_welcome():
    voices = engine.getProperty('voices')
    for voice in voices:
        if "zoya" in voice.name.lower():  # Set Female voice
            engine.setProperty('voice', voice.id)
            break

    engine.setProperty('rate', 90)  # Slow down speed (Default ~200)
    
    engine.say("Hii vedant Welcome to charge mitra .")
    engine.runAndWait()

# Function to get live location
def get_live_location():
    g = geocoder.ip("me")  # Get live location based on IP
    if g.latlng:
        latitude, longitude = g.latlng
        return latitude, longitude
    else:
        print("Live location not found. Enter manually.")
        return None, None

# Get charging stations from API
def get_charging_stations(latitude, longitude, distance):
    url = "https://api.openchargemap.io/v3/poi/"
    params = {
        "key": API_KEY,
        "latitude": latitude,
        "longitude": longitude,
        "distance": distance,
        "distanceunit": "KM"
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return []
    
# Update GUI with station data
def update_gui():
    try:
        distance = float(distance_entry.get())
        latitude, longitude = get_live_location()

        if latitude and longitude:
            stations = get_charging_stations(latitude, longitude, distance)
            tree.delete(*tree.get_children())

            if stations:
                for station in stations:
                    name = station.get("AddressInfo", {}).get("Title", "N/A")
                    address = station.get("AddressInfo", {}).get("AddressLine1", "N/A")
                    station_distance = station.get("AddressInfo", {}).get("Distance", "N/A")
                    tree.insert("", "end", values=(name, address, station_distance))
            else:
                print("No stations found or API error")
        else:
            print("Unable to fetch location.")

    except ValueError:
        print("Please enter valid distance value.")

# Show on Map function
def show_on_map():
    latitude, longitude = get_live_location()
    if latitude and longitude:
        map_url = f"https://www.google.com/maps/search/charging+stations/@{latitude},{longitude},12z"
        webbrowser.open(map_url)
    else:
        print("Invalid coordinates.")

# Tkinter GUI setup
root = tk.Tk()
root.title("            CHARGE___MITRA")
root.geometry("1024x768")

# Load Sci-Fi Background Image
bg_image_path = r"C:\Users\Administrator\Desktop\background.jpg3.jpg" 
bg_image = Image.open(bg_image_path)
bg_image = bg_image.resize((1400, 800), Image.LANCZOS)
bg_photo = ImageTk.PhotoImage(bg_image)

# Set Background Image
bg_label = tk.Label(root, image=bg_photo)
bg_label.place(relwidth=1, relheight=1)

# Transparent Frame for Table
frame = tk.Frame(root, bg="#1a1a1a", bd=5)
frame.place(relx=0.5, rely=0.4, anchor="center")

# Table with Custom Sci-Fi Style
style = ttk.Style()
style.configure("Treeview", background="#333", foreground="white", rowheight=30, fieldbackground="#333")
style.map("Treeview", background=[("selected", "#00ff00")])

columns = ("Name", "Address", "Distance")
tree = ttk.Treeview(frame, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col, anchor="center")
    tree.column(col, width=300, anchor="center")
tree.pack()

# Distance input field
distance_label = tk.Label(root, text="Enter distance (km):", font=("Arial", 12, "bold"), fg="white", bg="#1a1a1a")
distance_label.place(relx=0.5, rely=0.65, anchor="center")

distance_entry = tk.Entry(root, font=("Arial", 12), width=10)
distance_entry.place(relx=0.5, rely=0.7, anchor="center")

# Buttons with Sci-Fi Look
button_frame = tk.Frame(root, bg="black")
button_frame.place(relx=0.5, rely=0.8, anchor="center")

get_location_button = tk.Button(button_frame, text="Get Location", font=("Arial", 12, "bold"), fg="black", bg="#00ff00", relief="flat", command=update_gui)
get_location_button.pack(side=tk.LEFT, padx=20)

show_map_button = tk.Button(button_frame, text="Show on Map", font=("Arial", 12, "bold"), fg="black", bg="#00ff00", relief="flat", command=show_on_map)
show_map_button.pack(side=tk.RIGHT, padx=20)

# Initial data load
update_gui()

# Run the welcome message in a separate thread to avoid GUI freezing
welcome_thread = threading.Thread(target=speak_welcome)
welcome_thread.daemon = True
welcome_thread.start()

root.mainloop()
